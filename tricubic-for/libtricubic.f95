module libtricubic
implicit none

! Relative factor for finite differencing
real*8, parameter :: del = 1e-10

real*8 :: Amat(64,64)

data Amat(1,:) /&
     1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(2,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(3,:) /&
     -3.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(4,:) /&
     2.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(5,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(6,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(7,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(8,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(9,:) /&
     -3.0_8,0.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(10,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,0.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(11,:) /&
     9.0_8,-9.0_8,-9.0_8,9.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     6.0_8,3.0_8,-6.0_8,-3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     6.0_8,-6.0_8,3.0_8,-3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     4.0_8,2.0_8,2.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(12,:) /&
     -6.0_8,6.0_8,6.0_8,-6.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,-3.0_8,3.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -4.0_8,4.0_8,-2.0_8,2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-2.0_8,-1.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(13,:) /&
     2.0_8,0.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(14,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,0.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(15,:) /&
     -6.0_8,6.0_8,6.0_8,-6.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -4.0_8,-2.0_8,4.0_8,2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,3.0_8,-3.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-1.0_8,-2.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(16,:) /&
     4.0_8,-4.0_8,-4.0_8,4.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,2.0_8,-2.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,-2.0_8,2.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,1.0_8,1.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(17,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(18,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(19,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(20,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(21,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(22,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(23,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(24,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(25,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,0.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(26,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,0.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(27,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     9.0_8,-9.0_8,-9.0_8,9.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     6.0_8,3.0_8,-6.0_8,-3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     6.0_8,-6.0_8,3.0_8,-3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     4.0_8,2.0_8,2.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(28,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -6.0_8,6.0_8,6.0_8,-6.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,-3.0_8,3.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -4.0_8,4.0_8,-2.0_8,2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-2.0_8,-1.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(29,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,0.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(30,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,0.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(31,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -6.0_8,6.0_8,6.0_8,-6.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -4.0_8,-2.0_8,4.0_8,2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,3.0_8,-3.0_8,3.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-1.0_8,-2.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(32,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     4.0_8,-4.0_8,-4.0_8,4.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,2.0_8,-2.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,-2.0_8,2.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,1.0_8,1.0_8,1.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(33,:) /&
     -3.0_8,0.0_8,0.0_8,0.0_8,3.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,0.0_8,0.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(34,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,0.0_8,0.0_8,0.0_8,3.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,0.0_8,0.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(35,:) /&
     9.0_8,-9.0_8,0.0_8,0.0_8,-9.0_8,9.0_8,0.0_8,0.0_8,&
     6.0_8,3.0_8,0.0_8,0.0_8,-6.0_8,-3.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     6.0_8,-6.0_8,0.0_8,0.0_8,3.0_8,-3.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     4.0_8,2.0_8,0.0_8,0.0_8,2.0_8,1.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(36,:) /&
     -6.0_8,6.0_8,0.0_8,0.0_8,6.0_8,-6.0_8,0.0_8,0.0_8,&
     -3.0_8,-3.0_8,0.0_8,0.0_8,3.0_8,3.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -4.0_8,4.0_8,0.0_8,0.0_8,-2.0_8,2.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-2.0_8,0.0_8,0.0_8,-1.0_8,-1.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(37,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,0.0_8,0.0_8,0.0_8,3.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,0.0_8,0.0_8,-1.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(38,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,0.0_8,0.0_8,0.0_8,3.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,0.0_8,0.0_8,-1.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(39,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     9.0_8,-9.0_8,0.0_8,0.0_8,-9.0_8,9.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     6.0_8,3.0_8,0.0_8,0.0_8,-6.0_8,-3.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     6.0_8,-6.0_8,0.0_8,0.0_8,3.0_8,-3.0_8,0.0_8,0.0_8,&
     4.0_8,2.0_8,0.0_8,0.0_8,2.0_8,1.0_8,0.0_8,0.0_8 /
data Amat(40,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -6.0_8,6.0_8,0.0_8,0.0_8,6.0_8,-6.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,-3.0_8,0.0_8,0.0_8,3.0_8,3.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -4.0_8,4.0_8,0.0_8,0.0_8,-2.0_8,2.0_8,0.0_8,0.0_8,&
     -2.0_8,-2.0_8,0.0_8,0.0_8,-1.0_8,-1.0_8,0.0_8,0.0_8 /
data Amat(41,:) /&
     9.0_8,0.0_8,-9.0_8,0.0_8,-9.0_8,0.0_8,9.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     6.0_8,0.0_8,3.0_8,0.0_8,-6.0_8,0.0_8,-3.0_8,0.0_8,&
     6.0_8,0.0_8,-6.0_8,0.0_8,3.0_8,0.0_8,-3.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     4.0_8,0.0_8,2.0_8,0.0_8,2.0_8,0.0_8,1.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(42,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     9.0_8,0.0_8,-9.0_8,0.0_8,-9.0_8,0.0_8,9.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     6.0_8,0.0_8,3.0_8,0.0_8,-6.0_8,0.0_8,-3.0_8,0.0_8,&
     6.0_8,0.0_8,-6.0_8,0.0_8,3.0_8,0.0_8,-3.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     4.0_8,0.0_8,2.0_8,0.0_8,2.0_8,0.0_8,1.0_8,0.0_8 /
data Amat(43,:) /&
     -27,27,27.0_8,-27,27.0_8,-27.0_8,-27,27.0_8,&
     -18.0_8,-9,18.0_8,9,18.0_8,9.0_8,-18.0_8,-9.0_8,&
     -18,18.0_8,-9.0_8,9,18.0_8,-18.0_8,9.0_8,-9.0_8,&
     -18,18,18.0_8,-18.0_8,-9.0_8,9.0_8,9.0_8,-9.0_8,&
     -12.0_8,-6.0_8,-6.0_8,-3,12.0_8,6.0_8,6.0_8,3.0_8,&
     -12.0_8,-6,12.0_8,6.0_8,-6.0_8,-3.0_8,6.0_8,3.0_8,&
     -12,12.0_8,-6.0_8,6.0_8,-6.0_8,6.0_8,-3.0_8,3.0_8,&
     -8.0_8,-4.0_8,-4.0_8,-2.0_8,-4.0_8,-2.0_8,-2.0_8,-1.0_8 /
data Amat(44,:) /&
     18.0_8,-18.0_8,-18,18.0_8,-18,18,18.0_8,-18.0_8,&
     9.0_8,9.0_8,-9.0_8,-9.0_8,-9.0_8,-9.0_8,9.0_8,9,&
     12.0_8,-12.0_8,6.0_8,-6.0_8,-12,12.0_8,-6.0_8,6,&
     12.0_8,-12.0_8,-12,12.0_8,6.0_8,-6.0_8,-6.0_8,6.0_8,&
     6.0_8,6.0_8,3.0_8,3.0_8,-6.0_8,-6.0_8,-3.0_8,-3.0_8,&
     6.0_8,6.0_8,-6.0_8,-6.0_8,3.0_8,3.0_8,-3.0_8,-3.0_8,&
     8.0_8,-8.0_8,4.0_8,-4.0_8,4.0_8,-4.0_8,2.0_8,-2.0_8,&
     4.0_8,4.0_8,2.0_8,2.0_8,2.0_8,2.0_8,1.0_8,1.0_8 /
data Amat(45,:) /&
     -6.0_8,0.0_8,6.0_8,0.0_8,6.0_8,0.0_8,-6.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,0.0_8,-3.0_8,0.0_8,3.0_8,0.0_8,3.0_8,0.0_8,&
     -4.0_8,0.0_8,4.0_8,0.0_8,-2.0_8,0.0_8,2.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,-2.0_8,0.0_8,-1.0_8,0.0_8,-1.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(46,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -6.0_8,0.0_8,6.0_8,0.0_8,6.0_8,0.0_8,-6.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,0.0_8,-3.0_8,0.0_8,3.0_8,0.0_8,3.0_8,0.0_8,&
     -4.0_8,0.0_8,4.0_8,0.0_8,-2.0_8,0.0_8,2.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,-2.0_8,0.0_8,-1.0_8,0.0_8,-1.0_8,0.0_8 /
data Amat(47,:) /&
     18.0_8,-18.0_8,-18,18.0_8,-18,18,18.0_8,-18,&
     12.0_8,6.0_8,-12.0_8,-6.0_8,-12.0_8,-6,12.0_8,6.0_8,&
     9.0_8,-9.0_8,9.0_8,-9.0_8,-9.0_8,9.0_8,-9.0_8,9,&
     12.0_8,-12.0_8,-12,12.0_8,6.0_8,-6.0_8,-6.0_8,6.0_8,&
     6.0_8,3.0_8,6.0_8,3.0_8,-6.0_8,-3.0_8,-6.0_8,-3.0_8,&
     8.0_8,4.0_8,-8.0_8,-4.0_8,4.0_8,2.0_8,-4.0_8,-2.0_8,&
     6.0_8,-6.0_8,6.0_8,-6.0_8,3.0_8,-3.0_8,3.0_8,-3.0_8,&
     4.0_8,2.0_8,4.0_8,2.0_8,2.0_8,1.0_8,2.0_8,1.0_8 /
data Amat(48,:) /&
     -12,12,12.0_8,-12,12.0_8,-12.0_8,-12,12.0_8,&
     -6.0_8,-6.0_8,6.0_8,6.0_8,6.0_8,6.0_8,-6.0_8,-6.0_8,&
     -6.0_8,6.0_8,-6.0_8,6.0_8,6.0_8,-6.0_8,6.0_8,-6.0_8,&
     -8.0_8,8.0_8,8.0_8,-8.0_8,-4.0_8,4.0_8,4.0_8,-4.0_8,&
     -3.0_8,-3.0_8,-3.0_8,-3.0_8,3.0_8,3.0_8,3.0_8,3.0_8,&
     -4.0_8,-4.0_8,4.0_8,4.0_8,-2.0_8,-2.0_8,2.0_8,2.0_8,&
     -4.0_8,4.0_8,-4.0_8,4.0_8,-2.0_8,2.0_8,-2.0_8,2.0_8,&
     -2.0_8,-2.0_8,-2.0_8,-2.0_8,-1.0_8,-1.0_8,-1.0_8,-1.0_8 /
data Amat(49,:) /&
     2.0_8,0.0_8,0.0_8,0.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,1.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(50,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,0.0_8,0.0_8,0.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,1.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(51,:) /&
     -6.0_8,6.0_8,0.0_8,0.0_8,6.0_8,-6.0_8,0.0_8,0.0_8,&
     -4.0_8,-2.0_8,0.0_8,0.0_8,4.0_8,2.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,3.0_8,0.0_8,0.0_8,-3.0_8,3.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,-1.0_8,0.0_8,0.0_8,-2.0_8,-1.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(52,:) /&
     4.0_8,-4.0_8,0.0_8,0.0_8,-4.0_8,4.0_8,0.0_8,0.0_8,&
     2.0_8,2.0_8,0.0_8,0.0_8,-2.0_8,-2.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,-2.0_8,0.0_8,0.0_8,2.0_8,-2.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,1.0_8,0.0_8,0.0_8,1.0_8,1.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(53,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,0.0_8,0.0_8,0.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,1.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(54,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,0.0_8,0.0_8,0.0_8,-2.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,0.0_8,0.0_8,1.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(55,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -6.0_8,6.0_8,0.0_8,0.0_8,6.0_8,-6.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -4.0_8,-2.0_8,0.0_8,0.0_8,4.0_8,2.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -3.0_8,3.0_8,0.0_8,0.0_8,-3.0_8,3.0_8,0.0_8,0.0_8,&
     -2.0_8,-1.0_8,0.0_8,0.0_8,-2.0_8,-1.0_8,0.0_8,0.0_8 /
data Amat(56,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     4.0_8,-4.0_8,0.0_8,0.0_8,-4.0_8,4.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,2.0_8,0.0_8,0.0_8,-2.0_8,-2.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,-2.0_8,0.0_8,0.0_8,2.0_8,-2.0_8,0.0_8,0.0_8,&
     1.0_8,1.0_8,0.0_8,0.0_8,1.0_8,1.0_8,0.0_8,0.0_8 /
data Amat(57,:) /&
     -6.0_8,0.0_8,6.0_8,0.0_8,6.0_8,0.0_8,-6.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -4.0_8,0.0_8,-2.0_8,0.0_8,4.0_8,0.0_8,2.0_8,0.0_8,&
     -3.0_8,0.0_8,3.0_8,0.0_8,-3.0_8,0.0_8,3.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,-1.0_8,0.0_8,-2.0_8,0.0_8,-1.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(58,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -6.0_8,0.0_8,6.0_8,0.0_8,6.0_8,0.0_8,-6.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -4.0_8,0.0_8,-2.0_8,0.0_8,4.0_8,0.0_8,2.0_8,0.0_8,&
     -3.0_8,0.0_8,3.0_8,0.0_8,-3.0_8,0.0_8,3.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     -2.0_8,0.0_8,-1.0_8,0.0_8,-2.0_8,0.0_8,-1.0_8,0.0_8 /
data Amat(59,:) /&
     18.0_8,-18.0_8,-18,18.0_8,-18,18,18.0_8,-18,&
     12.0_8,6.0_8,-12.0_8,-6.0_8,-12.0_8,-6,12.0_8,6,&
     12.0_8,-12.0_8,6.0_8,-6.0_8,-12,12.0_8,-6.0_8,6.0_8,&
     9.0_8,-9.0_8,-9.0_8,9.0_8,9.0_8,-9.0_8,-9.0_8,9.0_8,&
     8.0_8,4.0_8,4.0_8,2.0_8,-8.0_8,-4.0_8,-4.0_8,-2.0_8,&
     6.0_8,3.0_8,-6.0_8,-3.0_8,6.0_8,3.0_8,-6.0_8,-3.0_8,&
     6.0_8,-6.0_8,3.0_8,-3.0_8,6.0_8,-6.0_8,3.0_8,-3.0_8,&
     4.0_8,2.0_8,2.0_8,1.0_8,4.0_8,2.0_8,2.0_8,1.0_8 /
data Amat(60,:) /&
     -12,12,12.0_8,-12,12.0_8,-12.0_8,-12,12.0_8,&
     -6.0_8,-6.0_8,6.0_8,6.0_8,6.0_8,6.0_8,-6.0_8,-6.0_8,&
     -8.0_8,8.0_8,-4.0_8,4.0_8,8.0_8,-8.0_8,4.0_8,-4.0_8,&
     -6.0_8,6.0_8,6.0_8,-6.0_8,-6.0_8,6.0_8,6.0_8,-6.0_8,&
     -4.0_8,-4.0_8,-2.0_8,-2.0_8,4.0_8,4.0_8,2.0_8,2.0_8,&
     -3.0_8,-3.0_8,3.0_8,3.0_8,-3.0_8,-3.0_8,3.0_8,3.0_8,&
     -4.0_8,4.0_8,-2.0_8,2.0_8,-4.0_8,4.0_8,-2.0_8,2.0_8,&
     -2.0_8,-2.0_8,-1.0_8,-1.0_8,-2.0_8,-2.0_8,-1.0_8,-1.0_8 /
data Amat(61,:) /&
     4.0_8,0.0_8,-4.0_8,0.0_8,-4.0_8,0.0_8,4.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,0.0_8,2.0_8,0.0_8,-2.0_8,0.0_8,-2.0_8,0.0_8,&
     2.0_8,0.0_8,-2.0_8,0.0_8,2.0_8,0.0_8,-2.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,1.0_8,0.0_8,1.0_8,0.0_8,1.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8 /
data Amat(62,:) /&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     4.0_8,0.0_8,-4.0_8,0.0_8,-4.0_8,0.0_8,4.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     2.0_8,0.0_8,2.0_8,0.0_8,-2.0_8,0.0_8,-2.0_8,0.0_8,&
     2.0_8,0.0_8,-2.0_8,0.0_8,2.0_8,0.0_8,-2.0_8,0.0_8,&
     0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,0.0_8,&
     1.0_8,0.0_8,1.0_8,0.0_8,1.0_8,0.0_8,1.0_8,0.0_8 /
data Amat(63,:) /&
     -12,12,12.0_8,-12,12.0_8,-12.0_8,-12,12.0_8,&
     -8.0_8,-4.0_8,8.0_8,4.0_8,8.0_8,4.0_8,-8.0_8,-4.0_8,&
     -6.0_8,6.0_8,-6.0_8,6.0_8,6.0_8,-6.0_8,6.0_8,-6.0_8,&
     -6.0_8,6.0_8,6.0_8,-6.0_8,-6.0_8,6.0_8,6.0_8,-6.0_8,&
     -4.0_8,-2.0_8,-4.0_8,-2.0_8,4.0_8,2.0_8,4.0_8,2.0_8,&
     -4.0_8,-2.0_8,4.0_8,2.0_8,-4.0_8,-2.0_8,4.0_8,2.0_8,&
     -3.0_8,3.0_8,-3.0_8,3.0_8,-3.0_8,3.0_8,-3.0_8,3.0_8,&
     -2.0_8,-1.0_8,-2.0_8,-1.0_8,-2.0_8,-1.0_8,-2.0_8,-1.0_8 /
data Amat(64,:) /&
     8.0_8,-8.0_8,-8.0_8,8.0_8,-8.0_8,8.0_8,8.0_8,-8.0_8,&
     4.0_8,4.0_8,-4.0_8,-4.0_8,-4.0_8,-4.0_8,4.0_8,4.0_8,&
     4.0_8,-4.0_8,4.0_8,-4.0_8,-4.0_8,4.0_8,-4.0_8,4.0_8,&
     4.0_8,-4.0_8,-4.0_8,4.0_8,4.0_8,-4.0_8,-4.0_8,4.0_8,&
     2.0_8,2.0_8,2.0_8,2.0_8,-2.0_8,-2.0_8,-2.0_8,-2.0_8,&
     2.0_8,2.0_8,-2.0_8,-2.0_8,2.0_8,2.0_8,-2.0_8,-2.0_8,&
     2.0_8,-2.0_8,2.0_8,-2.0_8,2.0_8,-2.0_8,2.0_8,-2.0_8,&
     1.0_8,1.0_8,1.0_8,1.0_8,1.0_8,1.0_8,1.0_8,1.0_8 /

contains
function ijk2n(i,j,k)
  integer :: ijk2n
  integer :: i,j,k
  
  ijk2n=(i+4*j+16*k)
end function ijk2n

subroutine point2xyz(p,x,y,z)
  integer, intent(in) :: p
  integer, intent(out) :: x,y,z

  select case (p)
     case (0)
        x=0
        y=0
        z=0
     case (1)
        x=1
        y=0
        z=0
     case (2)
        x=0
        y=1
        z=0
     case (3)
        x=1
        y=1
        z=0
     case (4)
        x=0
        y=0
        z=1
     case (5)
        x=1
        y=0
        z=1
     case (6)
        x=0
        y=1
        z=1
     case (7)
        x=1
        y=1
        z=1
     case default
        x=0
        y=0
        z=0
     end select
end subroutine point2xyz

subroutine tricubic_get_coeff( a, f, dfdx, dfdy, dfdz, d2fdxdy, d2fdxdz, d2fdydz, d3fdxdydz)
  real*8,intent(out) :: a(64)
  real*8,intent(in) :: f(8), dfdx(8), dfdy(8), dfdz(8), d2fdxdy(8), d2fdxdz(8)
  real*8,intent(in) :: d2fdydz(8), d3fdxdydz(8)
  integer :: i
  real*8 :: x(64)

  do i=1,8
     x(0+i)=f(i)
     x(8+i)=dfdx(i)
     x(16+i)=dfdy(i)
     x(24+i)=dfdz(i)
     x(32+i)=d2fdxdy(i)
     x(40+i)=d2fdxdz(i)
     x(48+i)=d2fdydz(i)
     x(56+i)=d3fdxdydz(i)
  end do
  call tricubic_get_coeff_stacked(a,x)
end subroutine tricubic_get_coeff

function tricubic_eval(a,x,y,z,derx,dery,derz)
  real*8 :: tricubic_eval
  real*8 :: a(64)
  real*8 :: x, y, z
  integer :: derx,dery,derz
  integer :: i,j,k
  real*8 :: cont
  integer :: w

  tricubic_eval = 0.0_8
  ! TRICUBIC_EVAL 
  !  The full version takes 3 extra integers args that allows to evaluate
  !  any partial derivative of f at the point
  !  derx=dery=derz=0 => f
  !  derx=2 dery=derz=0 => d2f/dx2
  !  derx=dery=derz=1 =? d3f/dxdydz
  !  NOTICE that (derx>3)||(dery>3)||(derz>3) => returns 0.0_8
  !  this computes   \frac{\partial ^{derx+dery+derz} d}{\partial x ^{derx} \partial y ^{dery} \partial z ^{derz}}

  do i=derx,3
     do j=dery,3
        do k=derz,3
           cont = a(ijk2n(i,j,k)+1)*(x**(i-derx))*(y**(j-dery))*(z**(k-derz))
           do w=0,derx-1
              cont = cont*(i-w)
           end do
           do w=0,dery-1
              cont = cont*(j-w)
           end do
           do w=0,derz-1
              cont = cont*(k-w)
           end do
           tricubic_eval = tricubic_eval + cont
        end do
     end do
  end do

end function tricubic_eval

subroutine tricubic_pointID2xyzInt( id, x, y, z )
  integer,intent(in) :: id
  integer,intent(out) :: x,y,z

  call point2xyz(id,x,y,z)
end subroutine tricubic_pointID2xyzInt

subroutine tricubic_pointID2xyz( id, x, y, z )
  integer,intent(in) :: id
  real*8,intent(out) :: x,y,z
  integer :: x2,y2,z2
  
  call point2xyz(id,x2,y2,z2)
  x = x2
  y = y2
  z = z2
end subroutine tricubic_pointID2xyz

subroutine tricubic_get_coeff_stacked(a,x)
  real*8,intent(out) :: a(64)
  real*8,intent(in) :: x(64)
  
  a = matmul(Amat, x)
end subroutine tricubic_get_coeff_stacked

subroutine tricubic_compute_finite_difference_derivatives( &
     f, dx,dy,dz, &
     dfdx, dfdy, dfdz, d2fdxdy, d2fdxdz, d2fdydz, d3fdxdydz )

  real*8,intent(out) :: dfdx(:,:,:), dfdy(:,:,:), dfdz(:,:,:), &
       d2fdxdy(:,:,:), d2fdxdz(:,:,:), d2fdydz(:,:,:), d3fdxdydz(:,:,:)
  real*8, intent(in) :: f(:,:,:), dx,dy,dz
  integer :: nx,ny,nz

  nx = size(f,1)
  ny = size(f,2)
  nz = size(f,3)

  ! df/dx
  if( nx > 2 ) then
     dfdx(2:nx-1,:,:) = (f(3:nx,:,:)-f(1:nx-2,:,:))/2.0_8/dx
     dfdx(1,:,:) = (f(2,:,:)-f(1,:,:))/dx
     dfdx(nx,:,:) = (f(nx,:,:)-f(nx-1,:,:))/dx
  else
     dfdx = 0.0_8 
  end if
  ! df/dy
  if( ny > 2 ) then
     dfdy(:,2:ny-1,:) = (f(:,3:ny,:)-f(:,1:ny-2,:))/2.0_8/dy
     dfdy(:,1,:) = (f(:,2,:)-f(:,1,:))/dy
     dfdy(:,ny,:) = (f(:,ny,:)-f(:,ny-1,:))/dy
  else
     dfdy = 0.0_8 
  end if
  ! df/dz
  if( nz > 2 ) then
     dfdz(:,:,2:nz-1) = (f(:,:,3:nz)-f(:,:,1:nz-2))/2.0_8/dz
     dfdz(:,:,1) = (f(:,:,2)-f(:,:,1))/dz
     dfdz(:,:,nz) = (f(:,:,nz)-f(:,:,nz-1))/dz
  else
     dfdz = 0.0_8 
  end if
  ! d2f/(dxdy)
  if( nx > 2 .and. ny > 2 ) then
     d2fdxdy(2:nx-1,:,:) = (dfdy(3:nx,:,:)-dfdy(1:nx-2,:,:))/2.0_8/dx
     d2fdxdy(1,:,:) = (dfdy(2,:,:)-dfdy(1,:,:))/dx
     d2fdxdy(nx,:,:) = (dfdy(nx,:,:)-dfdy(nx-1,:,:))/dx
  else
     d2fdxdy = 0.0_8 
  end if
  ! d2f/(dxdz)
  if( nx > 2 .and. nz > 2 ) then
     d2fdxdz(2:nx-1,:,:) = (dfdz(3:nx,:,:)-dfdz(1:nx-2,:,:))/2.0_8/dx
     d2fdxdz(1,:,:) = (dfdz(2,:,:)-dfdz(1,:,:))/dx
     d2fdxdz(nx,:,:) = (dfdz(nx,:,:)-dfdz(nx-1,:,:))/dx
  else
     d2fdxdz = 0.0_8 
  end if
  ! d2f/(dydz)
  if( ny > 2 .and. nz > 2 ) then
     d2fdydz(:,2:ny-1,:) = (dfdz(:,3:ny,:)-dfdz(:,1:ny-2,:))/2.0_8/dy
     d2fdydz(:,1,:) = (dfdz(:,2,:)-dfdz(:,1,:))/dy
     d2fdydz(:,ny,:) = (dfdz(:,ny,:)-dfdz(:,ny-1,:))/dy
  else
     d2fdydz = 0.0_8 
  end if
  ! d3f/(dxdydz)
  if( nx > 2 .and. ny > 2 .and. nz > 2 ) then
     d3fdxdydz(2:nx-1,:,:) = (d2fdydz(3:nx,:,:)-d2fdydz(1:nx-2,:,:))/2.0_8/dx
     d3fdxdydz(1,:,:) = (d2fdydz(2,:,:)-d2fdydz(1,:,:))/dx
     d3fdxdydz(nx,:,:) = (d2fdydz(nx,:,:)-d2fdydz(nx-1,:,:))/dx
  else
     d3fdxdydz = 0.0_8
  end if
   

end subroutine tricubic_compute_finite_difference_derivatives

!! This is the function you should probably use
function tricubic_interpolate_at( xi,yi,zi, &
     f, x, y, z, &
     dfdx, dfdy, dfdz, d2fdxdy, d2fdxdz, d2fdydz, d3fdxdydz, &
     dx,dy,dz, derx,dery,derz )
  real*8 :: tricubic_interpolate_at
  ! the point we want to interpolate at
  real*8 :: xi,yi,zi
  ! the gridded function f
  real*8 :: f(:,:,:)
  ! arrays containing the coordinates of the data in f
  real*8 :: x(:),y(:),z(:)
  ! whether to compute the function (0) or the derivative (n)
  integer:: derx,dery,derz
  real*8 :: dx,dy,dz

  integer :: is0(1), js0(1), ks0(1)
  integer :: istmp, jstmp, kstmp
  real*8 :: xil, yil, zil
  integer :: l
  integer :: ioffset, joffset, koffset
  integer :: ind
  integer :: nx,ny,nz
  integer :: flagi,flagj,flagk
  real*8 :: a(64)

  real*8 :: dfdx(:,:,:), dfdy(:,:,:), dfdz(:,:,:), &
       d2fdxdy(:,:,:), d2fdxdz(:,:,:), d2fdydz(:,:,:), d3fdxdydz(:,:,:)

  real*8 :: fval(8), dfdxval(8), dfdyval(8),dfdzval(8), &
       d2fdxdyval(8),d2fdxdzval(8),d2fdydzval(8),d3fdxdydzval(8)

  flagi=0
  flagj=0
  flagk=0
  nx = size(f,1)
  ny = size(f,2)
  nz = size(f,3)

  ! Find the index in the source array of the lower lefthand point
  is0 = maxloc((/ (ind,ind=1,nx) /), &
       mask = 0.0_8 <= (xi-x))
  js0 = maxloc((/ (ind,ind=1,ny) /), &
       mask = 0.0_8 <= (yi-y))
  ks0 = maxloc((/ (ind,ind=1,nz) /), &
       mask = 0.0_8 <= (zi-z))
  ! Find the offset within that cell
  if( is0(1) >=1  .and. is0(1) < size(x,1) ) then
     xil = (xi-x(is0(1)))/dx
  else
     xil = 0.0_8
  end if
  if( js0(1) >=1  .and. js0(1) < size(y,1) ) then
     yil = (yi-y(js0(1)))/dy
  else
     yil = 0.0_8
  end if
  if( ks0(1) >=1  .and. ks0(1) < size(z,1) ) then
     zil = (zi-z(ks0(1)))/dz
  else
     zil = 0.0_8
  end if

  ! Fill the arrays that the interpolator needs
  do l=1,8
     ! Find the integer offsets of the current cube corner,
     ! relative to the cube origin (0,0,0)
     call point2xyz(l-1,ioffset,joffset,koffset)
     istmp = is0(1) + ioffset
     jstmp = js0(1) + joffset
     kstmp = ks0(1) + koffset
     ! Bounds check.  We'll adjust the actual values below
     if( istmp < 1 ) then
        istmp = 1
        flagi = 1
     end if
     if( istmp > size(f,1) ) then
        istmp = size(f,1)
        flagi = 1
     end if
     if( jstmp < 1 ) then
        jstmp = 1
        flagj = 1
     end if
     if( jstmp > size(f,2) ) then
        jstmp = size(f,2)
        flagj = 1
     end if
     if( kstmp < 1 ) then
        kstmp = 1
        flagk = 1
     end if
     if( kstmp > size(f,3) ) then
        kstmp = size(f,3)
        flagk = 1
     end if

     fval(l) = f(istmp,jstmp,kstmp)
     dfdxval(l) = dfdx(istmp,jstmp,kstmp)*dx
     dfdyval(l) = dfdy(istmp,jstmp,kstmp)*dy
     dfdzval(l) = dfdz(istmp,jstmp,kstmp)*dz
     d2fdxdyval(l) = d2fdxdy(istmp,jstmp,kstmp)*dx*dy
     d2fdxdzval(l) = d2fdxdz(istmp,jstmp,kstmp)*dx*dz
     d2fdydzval(l) = d2fdydz(istmp,jstmp,kstmp)*dy*dz
     d3fdxdydzval(l) = d3fdxdydz(istmp,jstmp,kstmp)*dx*dy*dz
     
     ! Adjust if we've gone out of bound (set the variation equal to zero)
     if( flagi == 1 ) then
        dfdxval(l) = 0.0_8
        d2fdxdyval(l) = 0.0_8
        d2fdxdzval(l) = 0.0_8
        d3fdxdydzval(l) = 0.0_8
     end if
     if( flagj == 1 ) then
        dfdyval(l) = 0.0_8
        d2fdxdyval(l) = 0.0_8
        d2fdydzval(l) = 0.0_8
        d3fdxdydzval(l) = 0.0_8
     end if
     if( flagk == 1 ) then
        dfdzval(l) = 0.0_8
        d2fdxdzval(l) = 0.0_8
        d2fdydzval(l) = 0.0_8
        d3fdxdydzval(l) = 0.0_8
     end if

  end do
  ! Get the coefficients
  call tricubic_get_coeff(a,fval,dfdxval,dfdyval,dfdzval,&
       d2fdxdyval,d2fdxdzval,d2fdydzval,d3fdxdydzval)
  ! Call the interpolator
  tricubic_interpolate_at = tricubic_eval(a,xil,yil,zil,derx,dery,derz)

  ! per the documentation, we need to scale the derivatives 
  tricubic_interpolate_at = tricubic_interpolate_at / (dx**derx)
  tricubic_interpolate_at = tricubic_interpolate_at / (dy**dery)
  tricubic_interpolate_at = tricubic_interpolate_at / (dz**derz)

end function tricubic_interpolate_at

end module libtricubic
